// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cards.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const cardsReset = `-- name: CardsReset :exec
DELETE FROM cards
`

func (q *Queries) CardsReset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cardsReset)
	return err
}

const createCard = `-- name: CreateCard :one
INSERT INTO cards (id, created_at, updated_at, name, rarity, type)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, name, rarity, type
`

type CreateCardParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Rarity    string
	Type      string
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, createCard,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Rarity,
		arg.Type,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Rarity,
		&i.Type,
	)
	return i, err
}

const getAllCards = `-- name: GetAllCards :many
SELECT id, created_at, updated_at, name, rarity, type FROM cards
`

func (q *Queries) GetAllCards(ctx context.Context) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, getAllCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Rarity,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCard = `-- name: GetCard :one
SELECT id, created_at, updated_at, name, rarity, type FROM cards WHERE id = $1
`

func (q *Queries) GetCard(ctx context.Context, id uuid.UUID) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Rarity,
		&i.Type,
	)
	return i, err
}
